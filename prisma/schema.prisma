// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
    id                String            @id @unique()
    name              String
    surname           String
    email             String?
    username          String?
    phone             String?

    lastSeen          DateTime          @default(now())

    organization      String?
    platform          String

    userOne           Channel[]         @relation("UserOne")
    userTwo           Channel[]         @relation("UserTwo")
    sentChats         Chat[]
    createdGroups     Group[]
    sentGroupChats    GroupChat[]
    members           Member[]

    @@unique([id, platform, organization])
}

model Chat {
    id                Int               @id @default(autoincrement())
    message           String
    received          Boolean           @default(false)
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt

    sender            User              @relation(fields: [senderID], references: [id])
    senderID          String

    channel           Channel           @relation(fields: [channelID], references: [id])
    channelID         Int

    reply             Chat[]            @relation("reference")
    referenceID       Int?
    reference         Chat?             @relation("reference", fields: [referenceID], references: [id])
}

model Channel {
    id                Int               @id @default(autoincrement())

    userOne           User              @relation("UserOne", fields: [userOneID], references: [id])
    userOneID         String

    userTwo           User              @relation("UserTwo", fields: [userTwoID], references: [id])
    userTwoID         String

    organization      String?
    platform          String

    chats             Chat[]

    @@unique([userOneID, userTwoID, organization, platform])
}

model Group {
    id                Int               @id @default(autoincrement())
    name              String
    isPrivate         Boolean           @default(false)
    lastCommented     DateTime          @default(now())
    attachment        String?

    creatorID         String
    creator           User              @relation(fields: [creatorID], references: [id])

    organization      String?
    platform          String

    chats             GroupChat[]
    members           Member[]

    @@unique([platform, name, organization])
}

model GroupChat {
    id                Int               @id @default(autoincrement())
    message           String

    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt

    senderID          String
    sender            User              @relation(fields: [senderID], references: [id])

    delivered         Delivered[]

    groupID           Int
    group             Group             @relation(fields: [groupID], references: [id])

    reply             GroupChat[]       @relation("reference")
    referenceID       Int?
    reference         GroupChat?        @relation("reference", fields: [referenceID], references: [id])
}

model Member {
    user              User              @relation(fields: [userID], references: [id])
    userID            String

    group             Group             @relation(fields: [groupID], references: [id])
    groupID           Int

    joined            DateTime          @default(now())
    role              String            @default("member")

    delivered         Delivered[]

    @@id([userID, groupID])
}

model Delivered{
    member            Member            @relation(fields: [userID, groupID], references: [userID, groupID])
    userID            String
    groupID           Int

    chat             GroupChat          @relation(fields: [chatID], references: [id])
    chatID           Int                @id @unique
}