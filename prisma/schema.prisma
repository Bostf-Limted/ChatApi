// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Developer{
    id                String            @id @unique()
    name              String
    surname           String
    email             String
    phone             String

    projects          Project[]
}

model Project{
    id                Int              @id @default(autoincrement())
    name              String
    
    jwtAccessName     String
    jwtAccessKey      String

    developerID       String
    developer         Developer        @relation(fields: [developerID], references: [id], onDelete: Cascade)

    keys              AccessKey[]
    users             User[]
    groups            Group[]
    channels          Channel[]
    notifications     Notification[]

    @@unique([name, developerID])
}

model AccessKey{
    key               String            @id @unique
    enabled           Boolean           @default(false)

    projectID         Int
    project           Project           @relation(fields: [projectID], references: [id], onDelete: Cascade)

    @@unique([key, projectID])
}

model User {
    id                String            @id @unique()
    name              String
    surname           String
    email             String?
    username          String?
    phone             String?

    lastSeen          DateTime          @default(now())

    organization      String?
    
    projectID         Int
    project           Project            @relation(fields: [projectID], references: [id], onDelete: Cascade)

    userOne           Channel[]         @relation("UserOne")
    userTwo           Channel[]         @relation("UserTwo")
    sentChats         Chat[]
    createdGroups     Group[]
    sentGroupChats    GroupChat[]
    members           Member[]
    notifications     Notification[]    @relation("notification")
    sentNotification  Notification[]   @relation("NotificationSender")

    @@unique([id, projectID, organization])
}

model Chat {
    id                Int               @id @default(autoincrement())
    message           String
    received          Boolean           @default(false)
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt

    sender            User              @relation(fields: [senderID], references: [id], onDelete: Cascade)
    senderID          String

    channel           Channel           @relation(fields: [channelID], references: [id], onDelete: Cascade)
    channelID         Int

    reply             Chat[]            @relation("reference")
    referenceID       Int?
    reference         Chat?             @relation("reference", fields: [referenceID], references: [id], onDelete: SetNull)
}

model Channel {
    id                Int               @id @default(autoincrement())

    userOne           User              @relation("UserOne", fields: [userOneID], references: [id], onDelete: Cascade)
    userOneID         String

    userTwo           User              @relation("UserTwo", fields: [userTwoID], references: [id], onDelete: Cascade)
    userTwoID         String

    lastCommunicated  DateTime          @default(now())

    organization      String?
    
    projectID         Int
    project           Project            @relation(fields: [projectID], references: [id])

    chats             Chat[]

    @@unique([userOneID, userTwoID, organization, projectID])
}

model Group {
    id                Int               @id @default(autoincrement())
    name              String
    lastCommunicated  DateTime          @default(now())
    attachment        String?

    creatorID         String
    creator           User              @relation(fields: [creatorID], references: [id], onDelete: NoAction)

    organization      String?

    projectID         Int
    project           Project            @relation(fields: [projectID], references: [id])

    chats             GroupChat[]
    members           Member[]
    notifications Notification[]   @relation("GroupNotification")

    @@unique([projectID, name, organization])
}

model GroupChat {
    id                Int               @id @default(autoincrement())
    message           String

    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt

    senderID          String
    sender            User              @relation(fields: [senderID], references: [id], onDelete: Cascade)

    delivered         Delivered[]

    groupID           Int
    group             Group             @relation(fields: [groupID], references: [id], onDelete: Cascade)

    reply             GroupChat[]       @relation("reference")
    referenceID       Int?
    reference         GroupChat?        @relation("reference", fields: [referenceID], references: [id], onDelete: SetNull)
}

model Member {
    user              User              @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID            String

    group             Group             @relation(fields: [groupID], references: [id], onDelete: Cascade)
    groupID           Int

    joined            DateTime          @default(now())
    role              String            @default("member")

    delivered         Delivered[]

    @@id([userID, groupID])
}

model Delivered{
    member            Member            @relation(fields: [userID, groupID], references: [userID, groupID], onDelete: Cascade)

    userID            String
    groupID           Int

    chat             GroupChat          @relation(fields: [chatID], references: [id], onDelete: Cascade)
    chatID           Int                @id @unique
}

model Notification{
    id                Int               @id @default(autoincrement())
    message           String?
    alert             String  
    created           DateTime          @default(now())
    received          Boolean           @default(false)
    organization      String?

    senderID          String?
    sender            User?             @relation("NotificationSender", fields: [senderID], references: [id], onDelete: SetNull)

    groupID           Int?
    group             Group?            @relation("GroupNotification", fields: [groupID], references: [id], onDelete: SetNull)

    reciecver         User              @relation("notification", fields: [recieverID], references: [id], onDelete: Cascade)
    recieverID        String

    projectID         Int
    project           Project           @relation(fields: [projectID], references: [id])  
}